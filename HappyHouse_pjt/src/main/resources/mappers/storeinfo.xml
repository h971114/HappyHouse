<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- product.xml
     ==> sql문 작성
     
※주의:에러발생) 
          1. mapper루트에 반드시 namespace속성을 명시해야함 
          2. parameterType=""  resultType="" 에 들어가는 속성에 존재하지 않는 패키지나 클래스는 절대 쓰면 안됨
             parameterType="com.ssafy.dto.Product"  (O)
             parameterType="co.ssafy.dto.Product"   (X)
             
          3. sql문은 각각 종류에 맞는 태그안에 정의하고 그를 식별하기 위한 id속성을 중복되지 않게 작성해야 함.
          4. sql문에 제한된 문자(<,&) 를 표현하는 경우 CDATA섹션을 사용해야 함
             <![CDATA[  select sal from emp where sal<2000    ]]>
             
          5. <select>태그를 사용하는 경우 반드시 속성 resultType을 명시해야 함.
             ==> 에러가 발생하거나 또는 결과값이 null이 나올 수도 있다.
               
          Tip) id속성에는 DAO의 메소드명과 맞추어 주는것이 편리하다~!!    
-->
<mapper namespace="storeinfo">


<resultMap type="storeinfo" id="storeinfo">
	<result column="storename" property="storename"/>
	<result column="storeloc" property="storeloc"/>
	<result column="storecodename" property="storecodename"/>
	<result column="dongcode" property="dongcode"/>
	<result column="lat" property="lat"/>
	<result column="ing" property="ing"/>
</resultMap>

<resultMap type="dongcode" id="dongcode">
	<result column="dongcode" property="dongcode"/>
	<result column="dong" property="dong"/>
	<collection property="storeinfo" resultMap="storeinfo"/>
</resultMap>




	 <select id="selectstore"  parameterType="map" resultType="storeinfo">
	 SELECT p.storename, p.storeloc, p.storecodename,
		   p.dongcode, p.lat, p.ing
      FROM storeinfo p
	  JOIN dongcode c
	    ON p.dongcode = c.dongcode
	 WHERE c.dong = #{dong}
	limit ${map.start}, ${map.spp}
	<!--  select * FROM storeinfo WHERE dongcode in (SELECT dongcode from dongcode where dongcode.dong =${dong})  --> 
	 </select>
	<select id="getTotalCount" parameterType="map" resultType="int">
		select count(*)
		from storeinfo

	</select>
</mapper>







